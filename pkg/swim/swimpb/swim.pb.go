// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/swim/swimpb/swim.proto

/*
Package swimpb is a generated protocol buffer package.

It is generated from these files:
	pkg/swim/swimpb/swim.proto

It has these top-level messages:
	Member
	PingMessage
	Ack
*/
package swimpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_ALIVE   Status = 0
	Status_SUSPECT Status = 1
	Status_FAULTY  Status = 2
)

var Status_name = map[int32]string{
	0: "ALIVE",
	1: "SUSPECT",
	2: "FAULTY",
}
var Status_value = map[string]int32{
	"ALIVE":   0,
	"SUSPECT": 1,
	"FAULTY":  2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageType int32

const (
	MessageType_PING        MessageType = 0
	MessageType_PINGREQUEST MessageType = 1
	MessageType_BROADCAST   MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "PING",
	1: "PINGREQUEST",
	2: "BROADCAST",
}
var MessageType_value = map[string]int32{
	"PING":        0,
	"PINGREQUEST": 1,
	"BROADCAST":   2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MemberType int32

const (
	MemberType_MDS MemberType = 0
	MemberType_OSD MemberType = 1
)

var MemberType_name = map[int32]string{
	0: "MDS",
	1: "OSD",
}
var MemberType_value = map[string]int32{
	"MDS": 0,
	"OSD": 1,
}

func (x MemberType) String() string {
	return proto.EnumName(MemberType_name, int32(x))
}
func (MemberType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Member struct {
	Uuid        string     `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Type        MemberType `protobuf:"varint,2,opt,name=type,enum=github.com.chanyoung.nil.pkg.swimpb.MemberType" json:"type,omitempty"`
	Addr        string     `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
	Port        string     `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	Status      Status     `protobuf:"varint,5,opt,name=status,enum=github.com.chanyoung.nil.pkg.swimpb.Status" json:"status,omitempty"`
	Incarnation uint32     `protobuf:"varint,6,opt,name=incarnation" json:"incarnation,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Member) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Member) GetType() MemberType {
	if m != nil {
		return m.Type
	}
	return MemberType_MDS
}

func (m *Member) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Member) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Member) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_ALIVE
}

func (m *Member) GetIncarnation() uint32 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

type PingMessage struct {
	Type    MessageType `protobuf:"varint,1,opt,name=type,enum=github.com.chanyoung.nil.pkg.swimpb.MessageType" json:"type,omitempty"`
	Memlist []*Member   `protobuf:"bytes,2,rep,name=memlist" json:"memlist,omitempty"`
}

func (m *PingMessage) Reset()                    { *m = PingMessage{} }
func (m *PingMessage) String() string            { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()               {}
func (*PingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingMessage) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_PING
}

func (m *PingMessage) GetMemlist() []*Member {
	if m != nil {
		return m.Memlist
	}
	return nil
}

type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Member)(nil), "github.com.chanyoung.nil.pkg.swimpb.Member")
	proto.RegisterType((*PingMessage)(nil), "github.com.chanyoung.nil.pkg.swimpb.PingMessage")
	proto.RegisterType((*Ack)(nil), "github.com.chanyoung.nil.pkg.swimpb.Ack")
	proto.RegisterEnum("github.com.chanyoung.nil.pkg.swimpb.Status", Status_name, Status_value)
	proto.RegisterEnum("github.com.chanyoung.nil.pkg.swimpb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("github.com.chanyoung.nil.pkg.swimpb.MemberType", MemberType_name, MemberType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swim service

type SwimClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Ack, error)
}

type swimClient struct {
	cc *grpc.ClientConn
}

func NewSwimClient(cc *grpc.ClientConn) SwimClient {
	return &swimClient{cc}
}

func (c *swimClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/github.com.chanyoung.nil.pkg.swimpb.Swim/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Swim service

type SwimServer interface {
	Ping(context.Context, *PingMessage) (*Ack, error)
}

func RegisterSwimServer(s *grpc.Server, srv SwimServer) {
	s.RegisterService(&_Swim_serviceDesc, srv)
}

func _Swim_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.chanyoung.nil.pkg.swimpb.Swim/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Swim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.chanyoung.nil.pkg.swimpb.Swim",
	HandlerType: (*SwimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Swim_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/swim/swimpb/swim.proto",
}

func init() { proto.RegisterFile("pkg/swim/swimpb/swim.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0x9c, 0x30,
	0x14, 0x5c, 0x03, 0xcb, 0x66, 0x1f, 0x4a, 0x8b, 0x7c, 0x42, 0x39, 0x54, 0x88, 0x5e, 0xd0, 0xb6,
	0x72, 0xaa, 0xf4, 0xd0, 0x33, 0x01, 0x5a, 0x45, 0xca, 0x36, 0x5b, 0xcc, 0x56, 0x6a, 0x6f, 0x7c,
	0x89, 0x58, 0x2c, 0x1f, 0x02, 0xa3, 0x68, 0xff, 0x4a, 0x7f, 0x65, 0x7f, 0x42, 0x65, 0xb3, 0x55,
	0x38, 0x72, 0xb1, 0xc7, 0x4f, 0x9e, 0x79, 0x6f, 0xc6, 0x86, 0x9b, 0xae, 0x2a, 0x6f, 0x87, 0x17,
	0x56, 0xcb, 0xa5, 0x4b, 0xe5, 0x46, 0xba, 0xbe, 0xe5, 0x2d, 0x7e, 0x5f, 0x32, 0xfe, 0x3c, 0xa6,
	0x24, 0x6b, 0x6b, 0x92, 0x3d, 0x27, 0xcd, 0xb9, 0x1d, 0x9b, 0x92, 0x34, 0xec, 0x44, 0xba, 0xaa,
	0x24, 0xd3, 0x7d, 0xe7, 0x2f, 0x02, 0x7d, 0x5f, 0xd4, 0x69, 0xd1, 0x63, 0x0c, 0xda, 0x38, 0xb2,
	0xdc, 0x42, 0x36, 0x72, 0xb7, 0x91, 0xc4, 0xd8, 0x07, 0x8d, 0x9f, 0xbb, 0xc2, 0x52, 0x6c, 0xe4,
	0xbe, 0xb9, 0xbb, 0x25, 0x0b, 0x24, 0xc9, 0x24, 0x17, 0x9f, 0xbb, 0x22, 0x92, 0x64, 0x21, 0x9c,
	0xe4, 0x79, 0x6f, 0xa9, 0x93, 0xb0, 0xc0, 0xa2, 0xd6, 0xb5, 0x3d, 0xb7, 0xb4, 0xa9, 0x26, 0x30,
	0xf6, 0x41, 0x1f, 0x78, 0xc2, 0xc7, 0xc1, 0x5a, 0xcb, 0x76, 0x1f, 0x16, 0xb5, 0xa3, 0x92, 0x12,
	0x5d, 0xa8, 0xd8, 0x06, 0x83, 0x35, 0x59, 0xd2, 0x37, 0x09, 0x67, 0x6d, 0x63, 0xe9, 0x36, 0x72,
	0xaf, 0xa3, 0x79, 0xc9, 0xf9, 0x83, 0xc0, 0x38, 0xb0, 0xa6, 0xdc, 0x17, 0xc3, 0x90, 0x94, 0x05,
	0x0e, 0x2e, 0x1e, 0x91, 0x6c, 0xfa, 0x69, 0xa1, 0x47, 0xc9, 0x9d, 0x99, 0x0c, 0x61, 0x53, 0x17,
	0xf5, 0x89, 0x0d, 0xdc, 0x52, 0x6c, 0xd5, 0x35, 0x16, 0x4e, 0x3f, 0x85, 0x15, 0xfd, 0xe7, 0x3a,
	0x6b, 0x50, 0xbd, 0xac, 0xda, 0x7d, 0x04, 0x7d, 0xf2, 0x85, 0xb7, 0xb0, 0xf6, 0x1e, 0x1f, 0x7e,
	0x86, 0xe6, 0x0a, 0x1b, 0xb0, 0xa1, 0x47, 0x7a, 0x08, 0xfd, 0xd8, 0x44, 0x18, 0x40, 0xff, 0xea,
	0x1d, 0x1f, 0xe3, 0x5f, 0xa6, 0xb2, 0xfb, 0x02, 0xc6, 0x6c, 0x20, 0x7c, 0x05, 0xda, 0xe1, 0xe1,
	0xfb, 0x37, 0x73, 0x85, 0xdf, 0x82, 0x21, 0x50, 0x14, 0xfe, 0x38, 0x86, 0x54, 0xb0, 0xae, 0x61,
	0x7b, 0x1f, 0x3d, 0x79, 0x81, 0xef, 0xd1, 0xd8, 0x54, 0x76, 0xef, 0x00, 0x5e, 0x5f, 0x0b, 0x6f,
	0x40, 0xdd, 0x07, 0xd4, 0x5c, 0x09, 0xf0, 0x44, 0x03, 0x13, 0xdd, 0x9d, 0x40, 0xa3, 0x2f, 0xac,
	0xc6, 0x39, 0x68, 0x22, 0x31, 0xbc, 0x2c, 0x9c, 0x59, 0xb8, 0x37, 0xee, 0x22, 0x86, 0x97, 0x55,
	0xce, 0xea, 0xfe, 0xea, 0xb7, 0x3e, 0x9d, 0x53, 0x5d, 0xfe, 0xe0, 0xcf, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x78, 0x60, 0x16, 0x85, 0xdf, 0x02, 0x00, 0x00,
}
