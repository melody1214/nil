// Code generated by protoc-gen-go.
// source: nil/pkg/mds/mdspb/mds.proto
// DO NOT EDIT!

/*
Package mdspb is a generated protocol buffer package.

It is generated from these files:
	nil/pkg/mds/mdspb/mds.proto

It has these top-level messages:
*/
package mdspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import swim "github.com/chanyoung/nil/pkg/swim"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mds service

type MdsClient interface {
	T(ctx context.Context, in *swim.Test, opts ...grpc.CallOption) (*swim.Test, error)
}

type mdsClient struct {
	cc *grpc.ClientConn
}

func NewMdsClient(cc *grpc.ClientConn) MdsClient {
	return &mdsClient{cc}
}

func (c *mdsClient) T(ctx context.Context, in *swim.Test, opts ...grpc.CallOption) (*swim.Test, error) {
	out := new(swim.Test)
	err := grpc.Invoke(ctx, "/mdspb.Mds/T", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mds service

type MdsServer interface {
	T(context.Context, *swim.Test) (*swim.Test, error)
}

func RegisterMdsServer(s *grpc.Server, srv MdsServer) {
	s.RegisterService(&_Mds_serviceDesc, srv)
}

func _Mds_T_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(swim.Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MdsServer).T(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdspb.Mds/T",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MdsServer).T(ctx, req.(*swim.Test))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mdspb.Mds",
	HandlerType: (*MdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "T",
			Handler:    _Mds_T_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nil/pkg/mds/mdspb/mds.proto",
}

func init() { proto.RegisterFile("nil/pkg/mds/mdspb/mds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 92 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xce, 0xcb, 0xcc, 0xd1,
	0x2f, 0xc8, 0x4e, 0xd7, 0xcf, 0x4d, 0x29, 0x06, 0xe1, 0x82, 0x24, 0x10, 0xa9, 0x57, 0x50, 0x94,
	0x5f, 0x92, 0x2f, 0xc4, 0x0a, 0x16, 0x90, 0x12, 0x87, 0xa9, 0x29, 0x2e, 0xcf, 0xcc, 0x05, 0x13,
	0x10, 0x79, 0x23, 0x25, 0x2e, 0x66, 0xdf, 0x94, 0x62, 0x21, 0x69, 0x2e, 0xc6, 0x10, 0x21, 0x2e,
	0x3d, 0xb0, 0x44, 0x48, 0x6a, 0x71, 0x89, 0x14, 0x12, 0x3b, 0x89, 0x0d, 0xac, 0xd4, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x63, 0x58, 0xbf, 0x68, 0x69, 0x00, 0x00, 0x00,
}
