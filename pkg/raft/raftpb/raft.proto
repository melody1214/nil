syntax = "proto3";

package github.com.chanyoung.nil.pkg.raft.raftpb;
option go_package = "raftpb";

message JoinRequest {
}

message JoinResponse {
    enum Type {
        ACK           = 0;
        DB_MIGRATION  = 1;
        LOG_MIGRATION = 2;
    }

    Type   messageType = 1;
    string query       = 2;
}

//
// Basic RPC messages structure in the Diego's paper.
//
// Diego Ongaro and John Ousterhout. 2014. In search of and understandable consensus algorithm.
// In Proceedings of the 2014 USENIX Annual Technical Conference (ATC'14). 305-319.
//
message RequestVoteRequest {
    // Candidate's term.
    uint64 term         = 1;

    // Candidate's requesting vote.
    string candidateId  = 2;

    // Index of candidate's last log entry.
    uint64 lastLogIndex = 3;

    // Term of candidate's last log entry.
    uint64 lastLogTerm  = 4;
}

message RequestVoteResponse {
    // Current term, for candidate to update itself.
    uint64 term        = 1;

    // True means candidate received vote.
    bool   voteGranted = 2;
}

message AppendEntriesRequest {
    // Leader's term.
    uint64   term          = 1;

    // So follower can redirect clients.
    string   leaderId      = 2;

    // Index of log entry immediately preceding new ones.
    uint64   prevLogIndex  = 3;

    // Term of prevLogIndex entry.
    uint64   prevLogTerm   = 4;

    // Log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated bytes entries = 5;

    // Leader's commit index.
    uint64   leaderCommit  = 6;
}

message AppendEntriesResponse {
    // Current term, for leader to update itself.
    uint64 term    = 1;
    
    // True if follower contained entry matching prevLogIndex and prevLogTerm.
    bool   success = 2;
}

service Raft {
    rpc Join (JoinRequest) returns (stream JoinResponse) {}
}