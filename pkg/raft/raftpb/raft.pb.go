// Code generated by protoc-gen-go.
// source: pkg/raft/raftpb/raft.proto
// DO NOT EDIT!

/*
Package raftpb is a generated protocol buffer package.

It is generated from these files:
	pkg/raft/raftpb/raft.proto

It has these top-level messages:
	LogEntry
	JoinRequest
	JoinResponse
	RequestVoteRequest
	RequestVoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
*/
package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JoinResponse_Type int32

const (
	JoinResponse_ACK           JoinResponse_Type = 0
	JoinResponse_DB_MIGRATION  JoinResponse_Type = 1
	JoinResponse_LOG_MIGRATION JoinResponse_Type = 2
)

var JoinResponse_Type_name = map[int32]string{
	0: "ACK",
	1: "DB_MIGRATION",
	2: "LOG_MIGRATION",
}
var JoinResponse_Type_value = map[string]int32{
	"ACK":           0,
	"DB_MIGRATION":  1,
	"LOG_MIGRATION": 2,
}

func (x JoinResponse_Type) String() string {
	return proto.EnumName(JoinResponse_Type_name, int32(x))
}
func (JoinResponse_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type LogEntry struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type JoinRequest struct {
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type JoinResponse struct {
	MessageType JoinResponse_Type `protobuf:"varint,1,opt,name=messageType,enum=github.com.chanyoung.nil.pkg.raft.raftpb.JoinResponse_Type" json:"messageType,omitempty"`
	LogEntry    *LogEntry         `protobuf:"bytes,2,opt,name=logEntry" json:"logEntry,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinResponse) GetMessageType() JoinResponse_Type {
	if m != nil {
		return m.MessageType
	}
	return JoinResponse_ACK
}

func (m *JoinResponse) GetLogEntry() *LogEntry {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

//
// Basic RPC messages structure in the Diego's paper.
//
// Diego Ongaro and John Ousterhout. 2014. In search of and understandable consensus algorithm.
// In Proceedings of the 2014 USENIX Annual Technical Conference (ATC'14). 305-319.
//
type RequestVoteRequest struct {
	// Candidate's term.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// Candidate's requesting vote.
	CandidateId string `protobuf:"bytes,2,opt,name=candidateId" json:"candidateId,omitempty"`
	// Index of candidate's last log entry.
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	// Term of candidate's last log entry.
	LastLogTerm uint64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	// Current term, for candidate to update itself.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// True means candidate received vote.
	VoteGranted bool `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesRequest struct {
	// Leader's term.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// So follower can redirect clients.
	LeaderId string `protobuf:"bytes,2,opt,name=leaderId" json:"leaderId,omitempty"`
	// Index of log entry immediately preceding new ones.
	PrevLogIndex uint64 `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	// Term of prevLogIndex entry.
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	// Log entries to store (empty for heartbeat; may send more than one for efficiency)
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	// Leader's commit index.
	LeaderCommit uint64 `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesResponse struct {
	// Current term, for leader to update itself.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// True if follower contained entry matching prevLogIndex and prevLogTerm.
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.LogEntry")
	proto.RegisterType((*JoinRequest)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.JoinResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.RequestVoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "github.com.chanyoung.nil.pkg.raft.raftpb.AppendEntriesResponse")
	proto.RegisterEnum("github.com.chanyoung.nil.pkg.raft.raftpb.JoinResponse_Type", JoinResponse_Type_name, JoinResponse_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Raft_JoinClient, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Raft_JoinClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[0], c.cc, "/github.com.chanyoung.nil.pkg.raft.raftpb.Raft/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raft_JoinClient interface {
	Recv() (*JoinResponse, error)
	grpc.ClientStream
}

type raftJoinClient struct {
	grpc.ClientStream
}

func (x *raftJoinClient) Recv() (*JoinResponse, error) {
	m := new(JoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Raft service

type RaftServer interface {
	Join(*JoinRequest, Raft_JoinServer) error
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServer).Join(m, &raftJoinServer{stream})
}

type Raft_JoinServer interface {
	Send(*JoinResponse) error
	grpc.ServerStream
}

type raftJoinServer struct {
	grpc.ServerStream
}

func (x *raftJoinServer) Send(m *JoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.chanyoung.nil.pkg.raft.raftpb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Raft_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/raft/raftpb/raft.proto",
}

func init() { proto.RegisterFile("pkg/raft/raftpb/raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x5d, 0xb6, 0xac, 0x0d, 0x5f, 0x3b, 0x54, 0xcc, 0x90, 0xa2, 0x9e, 0x2a, 0x9f, 0x7a, 0x0a,
	0xa8, 0xc0, 0x2e, 0x9c, 0xba, 0x31, 0x55, 0x65, 0x65, 0x93, 0xa2, 0x8a, 0x03, 0x12, 0x42, 0x6e,
	0xf2, 0x2d, 0x8b, 0xd6, 0xd8, 0x5e, 0xec, 0x4c, 0xe4, 0xc8, 0x3f, 0xe0, 0xbf, 0x72, 0x47, 0x28,
	0x8e, 0x5b, 0x79, 0x93, 0x98, 0xc6, 0x2e, 0x89, 0xdf, 0x8b, 0xfd, 0xf2, 0xde, 0x73, 0x1c, 0x18,
	0xca, 0xeb, 0xec, 0x75, 0xc9, 0x2e, 0xb5, 0xb9, 0xc8, 0x95, 0xb9, 0x45, 0xb2, 0x14, 0x5a, 0x90,
	0x71, 0x96, 0xeb, 0xab, 0x6a, 0x15, 0x25, 0xa2, 0x88, 0x92, 0x2b, 0xc6, 0x6b, 0x51, 0xf1, 0x2c,
	0xe2, 0xf9, 0x3a, 0x92, 0xd7, 0x59, 0x64, 0x26, 0xb6, 0x8b, 0xe8, 0x11, 0x04, 0x0b, 0x91, 0x9d,
	0x72, 0x5d, 0xd6, 0xe4, 0x10, 0xf6, 0x73, 0x9e, 0xe2, 0x8f, 0xd0, 0x1b, 0x79, 0x63, 0x3f, 0x6e,
	0x41, 0xc3, 0xde, 0x54, 0x58, 0xd6, 0xe1, 0xee, 0xc8, 0x1b, 0x3f, 0x8b, 0x5b, 0x40, 0x0f, 0xa0,
	0xf7, 0x49, 0xe4, 0x3c, 0xc6, 0x9b, 0x0a, 0x95, 0xa6, 0xbf, 0x3d, 0xe8, 0xb7, 0x58, 0x49, 0xc1,
	0x15, 0x92, 0x6f, 0xd0, 0x2b, 0x50, 0x29, 0x96, 0xe1, 0xb2, 0x96, 0x68, 0x14, 0x9f, 0x4f, 0x3e,
	0x44, 0x8f, 0xf5, 0x15, 0xb9, 0x62, 0x51, 0x23, 0x11, 0xbb, 0x7a, 0xe4, 0x1c, 0x82, 0xb5, 0xb5,
	0x6d, 0x7c, 0xf5, 0x26, 0x93, 0xc7, 0x6b, 0x6f, 0x02, 0xc7, 0x5b, 0x0d, 0xfa, 0x0e, 0x7c, 0xa3,
	0xdb, 0x85, 0xbd, 0xe9, 0xc9, 0xd9, 0x60, 0x87, 0x0c, 0xa0, 0xff, 0xf1, 0xf8, 0xfb, 0xe7, 0xf9,
	0x2c, 0x9e, 0x2e, 0xe7, 0x17, 0xe7, 0x03, 0x8f, 0xbc, 0x80, 0x83, 0xc5, 0xc5, 0xcc, 0xa1, 0x76,
	0xe9, 0x2f, 0x0f, 0x88, 0x6d, 0xe0, 0x8b, 0xd0, 0x68, 0x87, 0x84, 0x80, 0xaf, 0xb1, 0x2c, 0x6c,
	0x8d, 0x66, 0x4c, 0x46, 0xd0, 0x4b, 0x18, 0x4f, 0xf3, 0x94, 0x69, 0x9c, 0xa7, 0xb6, 0x4b, 0x97,
	0x22, 0x14, 0xfa, 0x6b, 0xa6, 0xf4, 0x42, 0x64, 0x73, 0xb3, 0x09, 0x7b, 0x66, 0xf5, 0x1d, 0xae,
	0x51, 0xb1, 0x78, 0xd9, 0xbc, 0xc0, 0x37, 0x53, 0x5c, 0x8a, 0x9e, 0xc1, 0xcb, 0x3b, 0x8e, 0xec,
	0x76, 0xfc, 0xc3, 0xd2, 0xad, 0xd0, 0x38, 0x2b, 0x19, 0xd7, 0xd8, 0x5a, 0x0a, 0x62, 0x97, 0xa2,
	0x7f, 0x3c, 0x38, 0x9c, 0x4a, 0x89, 0x3c, 0x6d, 0x5a, 0xca, 0x51, 0x3d, 0x94, 0x70, 0x08, 0xc1,
	0x1a, 0x59, 0x8a, 0xe5, 0x36, 0xde, 0x16, 0x37, 0xd9, 0x64, 0x89, 0xb7, 0xf7, 0xb3, 0xb9, 0x5c,
	0x63, 0xc7, 0x62, 0x37, 0x9b, 0x43, 0x91, 0x05, 0x74, 0xb1, 0xf5, 0x11, 0xee, 0x8f, 0xf6, 0x9e,
	0xb8, 0xe7, 0x1b, 0x09, 0xd3, 0xb7, 0xf1, 0x77, 0x22, 0x8a, 0x22, 0xd7, 0x61, 0xc7, 0xf6, 0xed,
	0x70, 0xf4, 0x14, 0x5e, 0xdd, 0xcb, 0xff, 0x40, 0x9f, 0x21, 0x74, 0x55, 0x95, 0x24, 0xa8, 0x94,
	0xed, 0x72, 0x03, 0x27, 0x3f, 0x3d, 0xf0, 0x63, 0x76, 0xa9, 0x49, 0x0d, 0x7e, 0xf3, 0x61, 0x93,
	0xf7, 0xff, 0x7b, 0x10, 0x4c, 0xed, 0xc3, 0xa3, 0xa7, 0x9d, 0x1f, 0xba, 0xf3, 0xc6, 0x3b, 0x0e,
	0xbe, 0x76, 0xda, 0x47, 0xab, 0x8e, 0xf9, 0x47, 0xbc, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xcc, 0x14, 0x4e, 0x41, 0x04, 0x00, 0x00,
}
